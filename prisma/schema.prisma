datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
}

enum PlanType {
  MONTHLY
  LIFETIME
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Subscription          Subscription?
  credit                Int                    @default(10)

  resumes      Resume[]
  coverLetters CoverLetter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Subscription {
  id            String        @id @default(cuid())
  razorpayId    String        @unique
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String        @unique
  plan          PlanType
  paymentStatus PaymentStatus @default(PENDING)
  expiry        DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Resume {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String?
  description String?

  photoUrl    String?
  colorHex    String  @default("#000000")
  borderStyle String  @default("squircle")
  summary     String?
  firstName   String?
  lastName    String?
  jobTitle    String?
  city        String?
  country     String?
  phone       String?
  email       String?
  linkedinUrl String?
  xUrl        String?
  githubUrl   String?

  workExperiences WorkExperience[]
  educations      Education[]
  projects        Project[]
  Certificate     Certificate[]
  skills          String[]
  CourseWork      CourseWork[]
  coverLetters    CoverLetter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resumes")
}

model Project {
  id String @id @default(cuid())

  title            String?
  organisationName String?
  projectUrl       String?
  startDate        DateTime?
  endDate          DateTime?
  description      String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model Certificate {
  id String @id @default(cuid())

  title       String?
  source      String?
  duration    DateTime?
  description String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("certificates")
}

model CourseWork {
  id String @id @default(cuid())

  title       String?
  source      String?
  duration    DateTime?
  skills      String?
  description String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_works")
}

model WorkExperience {
  id String @id @default(cuid())

  position    String?
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experiences")
}

model Education {
  id String @id @default(cuid())

  degree    String?
  school    String?
  startDate DateTime?
  endDate   DateTime?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("educations")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model CoverLetter {
  id String @id @default(cuid())

  title       String
  content     String @db.Text
  jobTitle    String
  companyName String

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cover_letters")
}
